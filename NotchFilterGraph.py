channel=dict() 
var=dict() 
outputSignal=dict()  
i=0 
fs = 250.0  # Frecuencia de muestreo (Hz) 
f0 = 50.0  #Frecuencia a quitar de la señal (Hz) 
Q = 100.0  # Factor de calidad 
b, a = signal.iirnotch(f0, Q, fs) 
for i in range (1,9): 
    channel[i]=raw[i,31:]
    std=np.std(channel[i]) 
    var[i]=channel[i]-np.mean(channel[i]) 
    var[i]=var[i]/std 
    outputSignal[i] = signal.filtfilt(b, a, var[i]) 
plt.figure(figsize=(16,10)) 
plt.subplot(8, 1, 1) 
plt.plot(outputSignal[1],label='Canal 1') 
plt.legend() 
plt.title('Señal Filtrada 50[Hz] Notch ', fontsize=20) 
plt.subplot(8, 1, 2) 
plt.plot(outputSignal[2], label='Canal 2') 
plt.ylabel('Magnitud', fontsize=18) 
plt.subplots_adjust(hspace=0.5) 
plt.legend() 
plt.subplot(8, 1, 3) 
plt.plot(outputSignal[3], label='Canal 3') 
plt.subplots_adjust(hspace=0.5) 
plt.legend() 
plt.subplot(8, 1, 4) 
plt.plot(outputSignal[4], label='Canal 4') 
plt.subplots_adjust(hspace=0.5) 
plt.legend() 
plt.ylabel('Magnitud', fontsize=18) 
plt.subplot(8, 1, 5) 
plt.plot(outputSignal[5], label='Canal 5') 
plt.subplots_adjust(hspace=0.5)
plt.legend() 
plt.subplot(8, 1, 6) 
plt.plot(outputSignal[6], label='Canal 6') 
plt.subplots_adjust(hspace=0.5) 
plt.legend() 
plt.ylabel('Magnitud', fontsize=18) 
plt.subplot(8, 1, 7) 
plt.plot(outputSignal[7], label='Canal 7') 
plt.subplots_adjust(hspace=0.5) 
plt.legend() 
plt.subplot(8, 1, 8) 
plt.plot(outputSignal[8], label='Canal 8') 
plt.xlabel('Muestras', fontsize=20) 
plt.subplots_adjust(hspace=0.5) 
plt.legend()
